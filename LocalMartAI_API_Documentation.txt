# 🛒 LocalMartAI - Complete API Documentation for Postman Testing
# =================================================================

# BASE URL: http://localhost:8000/api/
# Authentication: Token-based (Add header: Authorization: Token <your_token_here>)

# =================================================================
# 1. USER AUTHENTICATION APIs
# =================================================================

## 1.1 Register User
POST /api/auth/register/
Content-Type: application/json

BODY (JSON):
{
    "username": "johndoe",
    "email": "john@example.com",
    "password": "securepass123",
    "password_confirm": "securepass123",
    "first_name": "John",
    "last_name": "Doe"
}

RESPONSE:
{
    "user": {
        "id": 1,
        "username": "johndoe",
        "email": "john@example.com",
        "first_name": "John",
        "last_name": "Doe"
    },
    "token": "9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b",
    "message": "User registered successfully."
}

## 1.2 Login User
POST /api/auth/login/
Content-Type: application/json

BODY (JSON):
{
    "username": "johndoe",
    "password": "securepass123"
}

RESPONSE:
{
    "user": {
        "id": 1,
        "username": "johndoe",
        "email": "john@example.com",
        "first_name": "John",
        "last_name": "Doe"
    },
    "token": "9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b",
    "message": "Login successful."
}

## 1.3 Logout User
POST /api/auth/logout/
Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b

BODY (JSON): {} (empty)

RESPONSE:
{
    "message": "Successfully logged out."
}

## 1.4 Get User Profile
GET /api/auth/profile/
Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b

RESPONSE:
{
    "user": {
        "id": 1,
        "username": "johndoe",
        "email": "john@example.com",
        "first_name": "John",
        "last_name": "Doe"
    },
    "message": "User profile retrieved successfully."
}

# =================================================================
# 2. VENDOR MANAGEMENT APIs
# =================================================================

## 2.1 List All Vendors
GET /api/vendors/

RESPONSE:
[
    {
        "id": 1,
        "user": 2,
        "user_info": {
            "id": 2,
            "username": "vendor1",
            "email": "vendor1@example.com",
            "first_name": "Vendor",
            "last_name": "One"
        },
        "name": "Fresh Mart",
        "address": "123 Main St, City",
        "reliability_score": "0.85",
        "phone": "+1234567890",
        "email": "vendor1@example.com",
        "is_active_vendor": true,
        "created_at": "2024-01-01T10:00:00Z",
        "updated_at": "2024-01-01T10:00:00Z"
    }
]

## 2.2 Create New Vendor
POST /api/vendors/
Content-Type: application/json

BODY (JSON):
{
    "user": 2,
    "name": "Green Grocers",
    "address": "456 Oak Ave, City",
    "phone": "+9876543210",
    "email": "green@example.com",
    "is_active_vendor": true
}

## 2.3 Get Specific Vendor
GET /api/vendors/{vendor_id}/

## 2.4 Update Vendor
PUT /api/vendors/{vendor_id}/
Content-Type: application/json

BODY (JSON):
{
    "user": 2,
    "name": "Updated Vendor Name",
    "address": "Updated Address",
    "phone": "+1111111111",
    "email": "updated@example.com",
    "is_active_vendor": true
}

## 2.5 Delete Vendor
DELETE /api/vendors/{vendor_id}/

# =================================================================
# 3. PRODUCT MANAGEMENT APIs
# =================================================================

## 3.1 List All Products
GET /api/products/

RESPONSE:
[
    {
        "id": 1,
        "name": "Tomato",
        "category": "Vegetable",
        "description": "Fresh organic tomatoes",
        "base_price": "3.50",
        "unit_of_measure": "kg",
        "image": null,
        "created_at": "2024-01-01T10:00:00Z",
        "updated_at": "2024-01-01T10:00:00Z"
    }
]

## 3.2 Create New Product
POST /api/products/
Content-Type: application/json

BODY (JSON):
{
    "name": "Spinach",
    "category": "Vegetable",
    "description": "Fresh green spinach leaves",
    "base_price": "2.50",
    "unit_of_measure": "kg"
}

## 3.3 Get Specific Product
GET /api/products/{product_id}/

## 3.4 Update Product
PUT /api/products/{product_id}/
Content-Type: application/json

BODY (JSON):
{
    "name": "Updated Product Name",
    "category": "Updated Category",
    "description": "Updated description",
    "base_price": "4.00",
    "unit_of_measure": "kg"
}

## 3.5 Delete Product
DELETE /api/products/{product_id}/

# =================================================================
# 4. WAREHOUSE INVENTORY APIs
# =================================================================

## 4.1 List Warehouse Products
GET /api/warehouse-products/

RESPONSE:
[
    {
        "id": 1,
        "product": 1,
        "product_name": "Tomato",
        "current_quantity": "100.00",
        "price": "3.00",
        "is_available": true,
        "last_updated": "2024-01-01T10:00:00Z"
    }
]

## 4.2 Create Warehouse Product
POST /api/warehouse-products/
Content-Type: application/json

BODY (JSON):
{
    "product": 1,
    "current_quantity": "150.00",
    "price": "3.25",
    "is_available": true
}

## 4.3 Update Warehouse Product
PUT /api/warehouse-products/{warehouse_product_id}/
Content-Type: application/json

BODY (JSON):
{
    "product": 1,
    "current_quantity": "120.00",
    "price": "3.50",
    "is_available": true
}

# =================================================================
# 5. VENDOR INVENTORY APIs
# =================================================================

## 5.1 List Vendor Products
GET /api/vendor-products/

RESPONSE:
[
    {
        "id": 1,
        "vendor": 1,
        "vendor_name": "Fresh Mart",
        "product": 1,
        "product_name": "Tomato",
        "current_quantity": "50.00",
        "price": "3.75",
        "is_available": true,
        "ai_freshness_score": "0.85",
        "last_updated": "2024-01-01T10:00:00Z"
    }
]

## 5.2 Create Vendor Product
POST /api/vendor-products/
Content-Type: application/json

BODY (JSON):
{
    "vendor": 1,
    "product": 1,
    "current_quantity": "75.00",
    "price": "3.80",
    "is_available": true,
    "ai_freshness_score": "0.90"
}

## 5.3 Update Vendor Product
PUT /api/vendor-products/{vendor_product_id}/
Content-Type: application/json

BODY (JSON):
{
    "vendor": 1,
    "product": 1,
    "current_quantity": "80.00",
    "price": "3.70",
    "is_available": true,
    "ai_freshness_score": "0.88"
}

# =================================================================
# 6. CART MANAGEMENT APIs
# =================================================================

## 6.1 Add Item to Cart
POST /api/cart/add/
Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b
Content-Type: application/json

BODY (JSON):
{
    "product_id": 1,
    "quantity": "2.50"
}

RESPONSE:
{
    "id": 1,
    "cart": 1,
    "product": 1,
    "product_name": "Tomato",
    "quantity": "2.50"
}

## 6.2 Remove Item from Cart
POST /api/cart/remove/
Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b
Content-Type: application/json

BODY (JSON):
{
    "product_id": 1,
    "quantity": "1.00"
}

RESPONSE:
{
    "status": "Item removed/quantity updated."
}

## 6.3 Remove Entire Item from Cart
POST /api/cart/remove/
Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b
Content-Type: application/json

BODY (JSON):
{
    "product_id": 1
}

## 6.4 Calculate Cart Fulfillment (AI-Powered)
GET /api/cart/calculate-fulfillment/
Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b

RESPONSE:
{
    "recommended_source": "Single Vendor (ML-Enhanced)",
    "details": {
        "Tomato": {
            "quantity": "2.50",
            "price_per_unit": "3.75",
            "source": "Fresh Mart",
            "total_item_value": "9.38"
        }
    },
    "total_cart_value": 9.38,
    "recommended_vendor_id": 1,
    "recommended_vendor_name": "Fresh Mart",
    "ml_insights": {
        "traditional_score": 0.85,
        "ml_prediction_score": 75.0,
        "freshness_score": 85.0,
        "combined_score": 81.25,
        "training_status": "Model learning from 0 orders"
    },
    "unfulfilled_items": []
}

## 6.5 View User Cart
GET /api/carts/
Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b

RESPONSE:
[
    {
        "id": 1,
        "user": 1,
        "user_username": "johndoe",
        "items": [
            {
                "id": 1,
                "cart": 1,
                "product": 1,
                "product_name": "Tomato",
                "quantity": "2.50"
            }
        ],
        "created_at": "2024-01-01T10:00:00Z",
        "updated_at": "2024-01-01T10:00:00Z"
    }
]

# =================================================================
# 7. ORDER MANAGEMENT APIs
# =================================================================

## 7.1 Place Order
POST /api/cart/place-order/
Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b
Content-Type: application/json

BODY (JSON):
{
    "fulfilled_by_vendor_id": 1,
    "delivery_address": "123 Customer St, City",
    "delivery_notes": "Ring doorbell twice",
    "fulfillment_details": {
        "recommended_source": "Single Vendor (ML-Enhanced)",
        "details": {
            "Tomato": {
                "quantity": "2.50",
                "price_per_unit": "3.75",
                "source": "Fresh Mart",
                "total_item_value": "9.38"
            }
        },
        "total_cart_value": 9.38
    }
}

RESPONSE:
{
    "id": 1,
    "user": 1,
    "user_username": "johndoe",
    "fulfilled_by_vendor": 1,
    "fulfilled_by_vendor_name": "Fresh Mart",
    "order_date": "2024-01-01T10:00:00Z",
    "total_amount": "9.38",
    "status": "Pending",
    "fulfillment_details": { ... },
    "items": [
        {
            "id": 1,
            "order": 1,
            "product": 1,
            "product_name": "Tomato",
            "quantity": "2.50",
            "price_at_order": "3.75",
            "source": "Vendor",
            "source_vendor": 1
        }
    ]
}

## 7.2 List User Orders (Get Order IDs)
GET /api/orders/
Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b

RESPONSE:
[
    {
        "id": 1,                              ← ORDER ID TO USE
        "user": 1,
        "user_username": "johndoe",
        "fulfilled_by_vendor": 1,
        "fulfilled_by_vendor_name": "Fresh Mart",
        "order_date": "2024-01-01T10:00:00Z",
        "total_amount": "9.38",
        "status": "Pending",                  ← CURRENT STATUS
        "fulfillment_details": { ... },
        "items": [...]
    },
    {
        "id": 2,                              ← ANOTHER ORDER ID
        "user": 1,
        "user_username": "johndoe",
        "fulfilled_by_vendor": 2,
        "fulfilled_by_vendor_name": "Green Grocers",
        "order_date": "2024-01-02T14:30:00Z",
        "total_amount": "15.75",
        "status": "Processing",               ← CURRENT STATUS
        "fulfillment_details": { ... },
        "items": [...]
    }
]

## 7.3 Get Specific Order (Get Single Order Details)
GET /api/orders/{order_id}/
Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b

Example: GET /api/orders/1/

RESPONSE:
{
    "id": 1,                                  ← ORDER ID
    "user": 1,
    "user_username": "johndoe",
    "fulfilled_by_vendor": 1,
    "fulfilled_by_vendor_name": "Fresh Mart",
    "order_date": "2024-01-01T10:00:00Z",
    "total_amount": "9.38",
    "status": "Pending",                      ← CURRENT STATUS
    "fulfillment_details": { ... },
    "items": [
        {
            "id": 1,
            "order": 1,
            "product": 1,
            "product_name": "Tomato",
            "quantity": "2.50",
            "price_at_order": "3.75",
            "source": "Vendor",
            "source_vendor": 1
        }
    ]
}

## 7.4 Update Order Status (Admin/Vendor) - STEP BY STEP
Content-Type: application/json

### STEP 1: Get Order ID
First, list all orders to find the order ID you want to update:
GET /api/orders/
Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b

### STEP 2: Update the Order Status
POST /api/orders/update-status/{order_id}/
Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b

Example: POST /api/orders/update-status/1/

BODY (JSON):
{
    "status": "Processing"
}

VALID STATUS VALUES:
- "Pending"
- "Processing"
- "Out for Delivery"
- "Delivered"
- "Cancelled"

RESPONSE:
{
    "message": "Order status updated to: Processing",
    "order_id": 1,
    "status": "Processing"
}

### EXAMPLE WORKFLOW:
1. GET /api/orders/ → Find order with id: 1, current status: "Pending"
2. POST /api/orders/update-status/1/ with {"status": "Processing"}
3. GET /api/orders/1/ → Verify status changed to "Processing"

## 7.5 Confirm Delivery (Customer)
POST /api/orders/confirm-delivery/{order_id}/
Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b
Content-Type: application/json

BODY (JSON): {} (empty)

RESPONSE:
{
    "message": "Delivery confirmed successfully! You can now review this vendor.",
    "order_id": 1,
    "status": "Delivered",
    "can_review": true
}

# =================================================================
# 8. REVIEW SYSTEM APIs (AI-Powered Sentiment Analysis)
# =================================================================

## 8.1 Create Review (with AI Sentiment Analysis)
POST /api/reviews/
Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b
Content-Type: application/json

BODY (JSON):
{
    "vendor": 1,
    "rating": 5,
    "comment": "Excellent service! The tomatoes were very fresh and delivered on time. Highly recommended!"
}

RESPONSE:
{
    "id": 1,
    "user": 1,
    "user_username": "johndoe",
    "vendor": 1,
    "vendor_name": "Fresh Mart",
    "rating": 5,
    "comment": "Excellent service! The tomatoes were very fresh and delivered on time. Highly recommended!",
    "ai_sentiment_score": "0.87",
    "created_at": "2024-01-01T10:00:00Z"
}

## 8.2 List All Reviews
GET /api/reviews/

## 8.3 Get Specific Review
GET /api/reviews/{review_id}/

## 8.4 Update Review
PUT /api/reviews/{review_id}/
Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b
Content-Type: application/json

BODY (JSON):
{
    "vendor": 1,
    "rating": 4,
    "comment": "Good service, but delivery was slightly delayed."
}

# =================================================================
# 9. RETURN SYSTEM APIs (AI-Powered Quality Detection)
# =================================================================

## 9.1 Process Return Request
POST /api/returns/process/
Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b
Content-Type: multipart/form-data

BODY (Form Data):
order_item_id: 1
return_quantity: 1.00
return_reason: "Product was rotten when delivered"
return_image: [file upload] (optional)

RESPONSE:
{
    "id": 1,
    "order_item": 1,
    "order_item_product_name": "Tomato",
    "order_item_quantity": "2.50",
    "user": 1,
    "user_username": "johndoe",
    "return_quantity": "1.00",
    "return_reason": "Product was rotten when delivered",
    "return_image": null,
    "ai_return_freshness_prediction": "Rotten",
    "ai_prediction_confidence": "0.92",
    "return_status": "Pending",
    "requested_at": "2024-01-01T10:00:00Z",
    "processed_at": null
}

## 9.2 List All Returns
GET /api/returns/

## 9.3 Get Specific Return
GET /api/returns/{return_id}/

# =================================================================
# 10. STANDARD CRUD APIs (ViewSets)
# =================================================================

## 10.1 Cart Items CRUD
GET /api/cart-items/           # List all cart items
POST /api/cart-items/          # Create cart item
GET /api/cart-items/{id}/      # Get specific cart item
PUT /api/cart-items/{id}/      # Update cart item
DELETE /api/cart-items/{id}/   # Delete cart item

BODY for POST/PUT (JSON):
{
    "cart": 1,
    "product": 1,
    "quantity": "2.00"
}

## 10.2 Order Items CRUD
GET /api/order-items/          # List all order items
POST /api/order-items/         # Create order item
GET /api/order-items/{id}/     # Get specific order item
PUT /api/order-items/{id}/     # Update order item
DELETE /api/order-items/{id}/  # Delete order item

BODY for POST/PUT (JSON):
{
    "order": 1,
    "product": 1,
    "quantity": "2.00",
    "price_at_order": "3.75",
    "source": "Vendor",
    "source_vendor": 1
}

# =================================================================
# AUTHENTICATION HEADERS
# =================================================================

For all protected endpoints, add this header:
Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b

# =================================================================
# ERROR RESPONSES
# =================================================================

## Common Error Formats:

400 Bad Request:
{
    "error": "Product ID and quantity are required."
}

401 Unauthorized:
{
    "detail": "Authentication credentials were not provided."
}

404 Not Found:
{
    "error": "Product not found."
}

422 Validation Error:
{
    "detail": "You cannot review Fresh Mart until you have received a delivered order from them."
}

# =================================================================
# TESTING WORKFLOW IN POSTMAN
# =================================================================

## Recommended Testing Sequence:

1. Register a new user
2. Login and get token
3. Create some products
4. Create a vendor
5. Add vendor products to inventory
6. Add items to cart
7. Calculate fulfillment (see AI recommendations)
8. Place order → **Note the order ID from response**
9. **LIST ORDERS** → GET /api/orders/ to see all order IDs
10. Update order status to "Processing" → POST /api/orders/update-status/{order_id}/
11. Update order status to "Out for Delivery" → POST /api/orders/update-status/{order_id}/
12. Confirm delivery → POST /api/orders/confirm-delivery/{order_id}/
13. Create review (see AI sentiment analysis)
14. Process return (see AI quality detection)

## HOW TO GET ORDER ID - PRACTICAL STEPS:

### Method 1: From Place Order Response
When you place an order, the response includes the order ID:
```
POST /api/cart/place-order/
Response: {"id": 1, "status": "Pending", ...}  ← Use this ID
```

### Method 2: List All Orders
```
GET /api/orders/
Response: [{"id": 1, "status": "Pending"}, {"id": 2, "status": "Processing"}]
```

### Method 3: Filter by Status (if needed)
You can use the order list to find orders by current status and update them accordingly.

## Sample Product Data for Testing:

Products to create:
1. {"name": "Tomato", "category": "Vegetable", "description": "Fresh red tomatoes", "base_price": "3.50", "unit_of_measure": "kg"}
2. {"name": "Spinach", "category": "Vegetable", "description": "Green leafy spinach", "base_price": "2.50", "unit_of_measure": "kg"}
3. {"name": "Milk", "category": "Dairy", "description": "Fresh cow milk", "base_price": "1.20", "unit_of_measure": "litre"}
4. {"name": "Bread", "category": "Bakery", "description": "Whole wheat bread", "base_price": "2.00", "unit_of_measure": "piece"}

Vendors to create:
1. {"user": 2, "name": "Fresh Mart", "address": "123 Main St, City", "phone": "+1234567890", "email": "fresh@example.com"}
2. {"user": 3, "name": "Green Grocers", "address": "456 Oak Ave, City", "phone": "+9876543210", "email": "green@example.com"}

# =================================================================
# AI FEATURES HIGHLIGHTS
# =================================================================

## AI-Powered Features to Test:

1. **Sentiment Analysis in Reviews:**
   - Create reviews with positive comments → See high ai_sentiment_score
   - Create reviews with negative comments → See low ai_sentiment_score
   - Watch vendor reliability_score update automatically

2. **ML-Enhanced Vendor Recommendations:**
   - Add items to cart and call calculate-fulfillment
   - See ML insights with traditional_score, ml_prediction_score, etc.
   - The system learns from order patterns

3. **AI Quality Detection in Returns:**
   - Create returns with reasons like "rotten", "damaged", "fresh"
   - See different ai_return_freshness_prediction values
   - Watch vendor freshness scores update

4. **Dynamic Vendor Scoring:**
   - Vendor reliability scores update based on review sentiment
   - Vendor freshness scores update based on return quality
   - ML system learns from order fulfillment patterns

# =================================================================
# END OF API DOCUMENTATION
# =================================================================
