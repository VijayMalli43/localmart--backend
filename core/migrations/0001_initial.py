# Generated by Django 4.2.23 on 2025-08-02 06:46

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(help_text='The user who owns this cart.', on_delete=django.db.models.deletion.CASCADE, related_name='carts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Cart',
                'verbose_name_plural': 'Carts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_date', models.DateTimeField(auto_now_add=True)),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Total amount of the order.', max_digits=10)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Processing', 'Processing'), ('Out for Delivery', 'Out for Delivery'), ('Delivered', 'Delivered'), ('Cancelled', 'Cancelled')], default='Pending', help_text='Current status of the order.', max_length=50)),
                ('fulfillment_details', models.JSONField(blank=True, help_text="Stores details of fulfillment (e.g., {'source': 'warehouse', 'items': [...]})", null=True)),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'ordering': ['-order_date'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=2, help_text='Quantity of the product in the order.', max_digits=10)),
                ('price_at_order', models.DecimalField(decimal_places=2, help_text='Price of the product at the time of order.', max_digits=10)),
                ('source', models.CharField(choices=[('Warehouse', 'Warehouse'), ('Vendor', 'Vendor')], help_text='Source of this item (Warehouse or specific Vendor).', max_length=50)),
                ('order', models.ForeignKey(help_text='The order this item belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='core.order')),
            ],
            options={
                'verbose_name': 'Order Item',
                'verbose_name_plural': 'Order Items',
                'ordering': ['product__name'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="e.g., 'Tomato', 'Spinach', 'Milk'.", max_length=255, unique=True)),
                ('category', models.CharField(help_text="e.g., 'Vegetable', 'Fruit', 'Dairy', 'Staples'.", max_length=100)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the product.', null=True)),
                ('base_price', models.DecimalField(blank=True, decimal_places=2, help_text='Suggested base price for the product (vendors set their own).', max_digits=10, null=True)),
                ('unit_of_measure', models.CharField(help_text="e.g., 'kg', 'gram', 'piece', 'bundle', 'litre'.", max_length=50)),
                ('image', models.ImageField(blank=True, help_text='Image of the generic product.', null=True, upload_to='products/')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the product record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the product record was last updated.')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the local grocery shop/vendor.', max_length=255, unique=True)),
                ('address', models.CharField(help_text='Full street address of the shop.', max_length=500)),
                ('reliability_score', models.DecimalField(decimal_places=2, default=0.5, help_text='AI-derived reliability score (0.00 to 1.00) based on reviews.', max_digits=3)),
                ('phone', models.CharField(blank=True, help_text="Vendor's contact phone number.", max_length=20, null=True)),
                ('email', models.EmailField(blank=True, help_text="Vendor's contact email address.", max_length=254, null=True)),
                ('is_active_vendor', models.BooleanField(default=True, help_text='Indicates if this vendor is currently active and listed on the platform.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the vendor record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the vendor record was last updated.')),
                ('user', models.OneToOneField(help_text='Links to the Django User account for vendor login.', on_delete=django.db.models.deletion.CASCADE, related_name='vendor_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Vendor',
                'verbose_name_plural': 'Vendors',
                'ordering': ['-reliability_score', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], help_text='Overall rating for the vendor/order from 1 (lowest) to 5 (highest) stars.')),
                ('comment', models.TextField(blank=True, help_text="Customer's textual review comment. Used by NLP for sentiment/freshness.")),
                ('ai_sentiment_score', models.DecimalField(blank=True, decimal_places=2, help_text='AI-derived sentiment score from the comment (e.g., -1.0 for very negative to 1.0 for very positive).', max_digits=3, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the review was created.')),
                ('user', models.ForeignKey(help_text='The customer (User) who left the review.', on_delete=django.db.models.deletion.CASCADE, related_name='customer_reviews', to=settings.AUTH_USER_MODEL)),
                ('vendor', models.ForeignKey(help_text='The vendor being reviewed.', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='core.vendor')),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Return',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('return_quantity', models.DecimalField(decimal_places=2, help_text='Quantity of the item being returned.', max_digits=10)),
                ('return_reason', models.TextField(help_text='Reason for the return.')),
                ('return_image', models.ImageField(blank=True, help_text='Image of the returned item (e.g., for quality issues).', null=True, upload_to='returns/')),
                ('ai_return_freshness_prediction', models.CharField(blank=True, help_text="AI's freshness prediction for the returned item (e.g., 'Rotten', 'Healthy').", max_length=50, null=True)),
                ('ai_prediction_confidence', models.DecimalField(blank=True, decimal_places=4, help_text="Confidence score of AI's prediction (0.0 to 1.0).", max_digits=5, null=True)),
                ('return_status', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Processed', 'Processed')], default='Pending', help_text='Current status of the return request.', max_length=50)),
                ('requested_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the return was requested.')),
                ('processed_at', models.DateTimeField(blank=True, help_text='Timestamp when the return was processed.', null=True)),
                ('order_item', models.ForeignKey(help_text='The specific order item being returned.', on_delete=django.db.models.deletion.CASCADE, related_name='returns', to='core.orderitem')),
                ('user', models.ForeignKey(help_text='The user initiating the return.', on_delete=django.db.models.deletion.CASCADE, related_name='returns', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Return',
                'verbose_name_plural': 'Returns',
                'ordering': ['-requested_at'],
            },
        ),
        migrations.AddField(
            model_name='orderitem',
            name='product',
            field=models.ForeignKey(help_text='The generic product in the order.', on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='core.product'),
        ),
        migrations.AddField(
            model_name='orderitem',
            name='source_vendor',
            field=models.ForeignKey(blank=True, help_text="The specific vendor if source is 'Vendor'.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sourced_order_items', to='core.vendor'),
        ),
        migrations.AddField(
            model_name='order',
            name='fulfilled_by_vendor',
            field=models.ForeignKey(blank=True, help_text='The vendor who fulfilled this order (or null if from company warehouse).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fulfilled_orders', to='core.vendor'),
        ),
        migrations.AddField(
            model_name='order',
            name='user',
            field=models.ForeignKey(help_text='The user who placed this order.', on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='CompanyWarehouseProducts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_quantity', models.DecimalField(decimal_places=2, help_text='Current quantity available in the company warehouse.', max_digits=10)),
                ('price', models.DecimalField(decimal_places=2, help_text='Price of the product from the company warehouse.', max_digits=10)),
                ('is_available', models.BooleanField(default=True, help_text='Is this product currently in stock at the company warehouse?')),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Timestamp when this warehouse stock was last updated.')),
                ('product', models.OneToOneField(help_text='The generic product available in the company warehouse.', on_delete=django.db.models.deletion.CASCADE, related_name='warehouse_stock', to='core.product')),
            ],
            options={
                'verbose_name': 'Company Warehouse Product',
                'verbose_name_plural': 'Company Warehouse Products',
                'ordering': ['product__name'],
            },
        ),
        migrations.CreateModel(
            name='VendorProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_quantity', models.DecimalField(decimal_places=2, help_text='Current quantity available at this vendor.', max_digits=10)),
                ('price', models.DecimalField(decimal_places=2, help_text='Price of the product at this vendor.', max_digits=10)),
                ('is_available', models.BooleanField(default=True, help_text='Is this specific product currently in stock at this vendor?')),
                ('ai_freshness_score', models.DecimalField(blank=True, decimal_places=2, help_text='AI-detected freshness score for the current stock batch (0.00 to 1.00).', max_digits=3, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, help_text="Timestamp when this vendor's inventory/price was last updated.")),
                ('product', models.ForeignKey(help_text='The generic product being offered by this vendor.', on_delete=django.db.models.deletion.CASCADE, related_name='vendor_offerings', to='core.product')),
                ('vendor', models.ForeignKey(help_text='The local vendor selling this product.', on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='core.vendor')),
            ],
            options={
                'verbose_name': 'Vendor Product (Inventory)',
                'verbose_name_plural': 'Vendor Products (Inventory)',
                'ordering': ['vendor__name', 'product__name'],
                'unique_together': {('vendor', 'product')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='orderitem',
            unique_together={('order', 'product')},
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=2, help_text='Quantity of the product in the cart (e.g., 0.5 for 500gm, 1.0 for 1kg).', max_digits=10)),
                ('cart', models.ForeignKey(help_text='The cart this item belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='core.cart')),
                ('product', models.ForeignKey(help_text='The generic product in the cart.', on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to='core.product')),
            ],
            options={
                'verbose_name': 'Cart Item',
                'verbose_name_plural': 'Cart Items',
                'ordering': ['product__name'],
                'unique_together': {('cart', 'product')},
            },
        ),
    ]
